// components:
import Card from '../vue-components/Card.vue';
import Popups from '../vue-components/Popups.vue';
import Popouts from '../vue-components/Popouts.vue';
import Flashes from '../vue-components/Flashes.vue';
import { mapMutations, mapGetters, mapState, mapActions } from 'vuex';

import Selection from '../vue-components/Selection.js';
window.selection = new Selection();

export default () => ({
	el:'#items-app',
	store,
	components: {
		Card,
		Popups,
		Popouts,
		Flashes
	},
	mounted() {
        eventHub.$on('confirm-ok', function(id) {
            console.log('computer says "ok"...');
            console.log(id);
            store.dispatch('deleteItem', {id});
        });
        eventHub.$on('confirm-cancel', function(id) {
            console.log('computer says "no"...');
            console.log(id);
            return;
        });
        this.sortAllChildren();
    },
    data: {
	    selection:window.selection,
    },
	computed:
	{
		...mapState([
			'nodes',
			'root',
			'orphans',
			'source',
			'languageContents',
			// 'selection',
			'debug',
			'doneData',
			'addingNewUnder',
			'addingNewAsChild',
			'addingNewAsFirstChild',
			'editingItem',
			'editingItemTags',
			'editingDoneDateItem',
			'loading',
			'patching',
			'popups',
			'popouts',
			'flashes',
			'timerItems',
			'beforeEditCache_body',
			'beforeEditCache_planned_time',
			'fetchedDone',
			'cancelThroughKeydown',
			'manualMobile',
			'newItem',
			'newTag',
			'setLanguage',
		]),
		...mapGetters([
			'hasTag',
			'hasParentWithTag',
			'parentIdWithTag',
			'returnTagsAsArray',
			'siblingIndex',
			'olderSiblingId',
			'nextItemId',
			'nextSiblingOrParentsSiblingId',
			'deepestChild',
			'topLvlParentOfDeepestChild',
			'prevItemId',
			'nextItemRecursion',
			'isTopLvlItemInFilteredRoot',
			'hasParentDueToday',
			'isDueToday',
			'isProject',
			'itemTagArray',
			'allChildrenDone',
			'getAllChildrenIds',
			'getAllChildrenIdsRecursive',
			'calTotalPlannedTime',
			'calTotalUsedTime',
			'checkValParentTree',
			'getParentsAsArray',
			'getParentsRecursive',
			'getLastChildId',
			'getDeepestLastChildId',
			'setDefaultItemValues',
			'flattenTree',
			'itIsADeepestChild',
			'countChildren',
			'countDoneChildren',
			'findDeepestVisibleChild',
			'isFirstItem',
			'language',
			'text',
			'allData',
			'mobile',
			'mobileSmall',
			'noItems',
			'filteredItems',
			'filteredItemsJournal',
			'journalDates',
			'filteredItemsFlat',
			'filteredItemsTree',
			'hiddenItemIds',
			'selectionFilter',
			'selectionTags',
			'selectionHiddenTags',
			'allTagsComputed',
			'allTagsComputed_2',
			'allTagsComputed_3',
			'allTagsComputed_1b',
			'itemAmount',
			'doneItemAmount',
			'totalPlannedMin',
			'totalPlannedSec',
			'totalUsedSec',
			'totalSecLeft',
			'totalUsedHourMin',
			'totalHourMinLeft',
			'lastItems',
			'firstItem',
			'topLvlItems',
		]),
	},
	watch:
	{
	},
	methods:
	{
		...mapMutations([
			'updateState',
			'resetNewItem',
			'addChild',
			'deleteChild',
	    ]),
	    ...mapActions([
	    	'giveNewParent',
			'duplicate',
			'addAndCleanNodesRecursively',
			'addItem',
			'addTempNewItem',
			'hideTaggedNodes',
			'hideDoneNodes',
			'sortAllChildren',
			'sortChildren',
			'updateChildrenDepth',
			'copyParentBodyToAllChildren',
			'attachParentBody',
			'deleteItem',
			'tagItem',
			'prepareTag',
			'prepareDonePatch',
			'autoCalculateDoneState',
			'updateItemTagsDom',
			'moveItem',
			'flushDoneItems',
			'setDueDate',
			'updateChildrenDueDate',
			'formatDone',
			'setCancelThroughKeydown',
			'startEdit',
			'scrollToItemIfNeeded',
			'doneEdit',
			'cancelEdit',
			'cancelAddNew',
			'addNew',
			'checkFilteredItemsTree',
			'showChildren',
			'markDone',
			'indent',
			'unindent',
			'selectItem',
			'setToday',
			'showAddNewItem',
			'startEditTags',
			'stopPatching',
			'startPatching',
			'patchRootChildrenOrderWithFilter',
			'patch',
			'patchTag',
			'patchDueDate',
			'patchDone',
			'deleteItem',
			'deleteItemApi',
			'popup',
			'sendFlash',
			'popout',
			'addTimer',
			'fetchDone',
			'filterItems',
			'removeFilter',
			'postNewItem',
			'test',
			'alert',
	    ]),
	},
	http: {
		headers: {
			'X-CSRF-TOKEN': document.querySelector('#csrf-token').getAttribute('content'),
		},
    },
})